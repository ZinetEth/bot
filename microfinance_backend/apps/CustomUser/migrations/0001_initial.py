# Generated by Django 5.2.3 on 2025-06-28 08:33

import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='first name')),
                ('father_name', models.CharField(blank=True, max_length=150, null=True)),
                ('grand_father_name', models.CharField(blank=True, max_length=150, null=True)),
                ('telegram_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('preferred_language', models.CharField(default='en', max_length=5)),
                ('referral_code', models.CharField(blank=True, help_text='Unique code for user referrals.', max_length=10, null=True, unique=True)),
                ('account_balance', models.DecimalField(decimal_places=2, default=0.0, help_text='Current account balance in Birr.', max_digits=15)),
                ('last_bot_interaction', models.DateTimeField(auto_now=True, help_text='Last time this user interacted with the Telegram bot.', null=True)),
                ('is_kyc_verified', models.BooleanField(default=False, help_text="Boolean flag indicating if the user's KYC profile has been approved.")),
                ('kyc_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', help_text='Current KYC verification status (Pending, Approved, Rejected).', max_length=20)),
                ('role', models.CharField(choices=[('CUSTOMER', 'Customer'), ('STAFF', 'Staff'), ('LOAN_OFFICER', 'Loan Officer'), ('MANAGER', 'Manager'), ('ADMIN', 'Admin')], default='CUSTOMER', help_text='The role of the user in the microfinance system.', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_groups', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_user_permissions', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
