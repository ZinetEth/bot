"""
Django settings for microfinance_backend project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-your-very-secret-key-for-development-only') # Use environment variable in production!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*'] # Allow all hosts for development. Restrict in production.


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # Required for some Django features, like webhooks if using django-telegram-bot library's webhook setup

    # Your custom applications
    'apps.CustomUser',
    'apps.telegram',
    'apps.miniapp',
    'apps.kyc',
    'apps.shares',
    'apps.mlm',
    'apps.staff_panel', # For the custom admin/staff panel
    'apps.core', # Ensure this is present and uncommented
    'apps.payments', # <-- ADDED: Your payments app
]

SITE_ID = 1 # Required for django.contrib.sites

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware', # <-- COMMENT OUT OR REMOVE THIS LINE
]

ROOT_URLCONF = 'microfinance_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Project-level templates
        'APP_DIRS': True, # <-- THIS MUST BE True for app-specific templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # <-- Added debug context processor
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'microfinance_backend.wsgi.application'
ASGI_APPLICATION = 'microfinance_backend.asgi.application' # Existing in your file, kept.


# Database
# Using MySQL as requested
# Make sure to create the database 'microfinance_db' in MySQL
# and configure user/password with appropriate permissions.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # <-- CURRENTLY SQLITE3
        'NAME': BASE_DIR / 'db.sqlite3',
    }
    # Example MySQL configuration (uncomment and replace with your details if using MySQL)
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'microfinance_db',
    #     'USER': 'your_mysql_user',
    #     'PASSWORD': 'your_mysql_password',
    #     'HOST': '127.0.0.1',
    #     'PORT': '3306',
    #     'OPTIONS': {
    #         'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
    #     }
    # }
    # Example PostgreSQL configuration (uncomment and replace with your details if using PostgreSQL)
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'microfinance_db',
    #     'USER': 'your_pg_user',
    #     'PASSWORD': 'your_pg_password',
    #     'HOST': 'localhost',
    #     'PORT': '5432',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom User Model
AUTH_USER_MODEL = 'CustomUser.CustomUser'


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi' # Assuming East Africa Time, adjust if needed

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Collect static files here in production
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # Project-level static files
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Telegram Bot Settings
# IMPORTANT: Replace 'YOUR_TELEGRAM_BOT_TOKEN_HERE' with your actual bot token!
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '7493560731:AAFR_-6UjOYUHmDIEtuWtjYGEWk5EGc9FUE')
# For production, always use environment variables for sensitive data!
# Example: export TELEGRAM_BOT_TOKEN='123456:ABC-DEF1234ghIJKlmnOPQRST'

# Celery Configuration (from your previous settings)
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'
CELERY_ENABLE_UTC = True

from celery.schedules import timedelta
CELERY_BEAT_SCHEDULE = {
    'check-and-expire-tokens-daily': {
        'task': 'tokens.tasks.check_and_expire_tokens_task',
        'schedule': timedelta(days=1),  # Run once every 24 hours
        'args': (), # Arguments to pass to the task function (none here)
        'options': {'queue': 'default'} # Which queue to send the task to
    },
    'redistribute-rewards-weekly': {
        'task': 'tokens.tasks.redistribute_rewards_task', # Path to your task
        'schedule': timedelta(weeks=1), # Run once every week
        'args': (),
        'options': {'queue': 'default'}
    },
}

# Authentication Settings for Web UI
LOGIN_REDIRECT_URL = 'home' # URL name to redirect to after successful login
LOGOUT_REDIRECT_URL = 'login' # URL name to redirect to after successful logout
LOGIN_URL = 'login' # URL name for the login page (Django uses this for @login_required)

# Optional: Messages framework (for displaying success/error messages)
# Add this if you haven't already and plan to use Django's messages framework
# MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
